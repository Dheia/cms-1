!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module.default}:function getModuleExports(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="/",__webpack_require__(__webpack_require__.s=0)}([function(module,exports,__webpack_require__){"use strict";var SessionStatus,IndexingActions;!function(SessionStatus){SessionStatus[SessionStatus.ACTIONREQUIRED=0]="ACTIONREQUIRED",SessionStatus[SessionStatus.ACTIVE=1]="ACTIVE",SessionStatus[SessionStatus.WAITING=2]="WAITING"}(SessionStatus||(SessionStatus={})),function(IndexingActions){IndexingActions.START="asset-indexes/start-indexing",IndexingActions.STOP="asset-indexes/stop-indexing-session",IndexingActions.PROCESS="asset-indexes/process-indexing-session",IndexingActions.OVERVIEW="asset-indexes/indexing-session-overview",IndexingActions.FINISH="asset-indexes/finish-indexing-session"}(IndexingActions||(IndexingActions={}));class AssetIndexer{constructor($indexingSessionTable,sessions,maxConcurrentConnections=3){this._currentIndexingSession=null,this._currentConnectionCount=0,this._tasksWaiting=[],this._priorityTasks=[],this._prunedSessionIds=[],this._currentlyReviewing=!1,this.indexingSessions={},this._maxConcurrentConnections=maxConcurrentConnections,this.$indexingSessionTable=$indexingSessionTable,this.indexingSessions={};let reviewSessionId=0;for(const sessionModel of sessions){let session=this.createSessionFromModel(sessionModel);session.getSessionStatus()!==SessionStatus.ACTIONREQUIRED||reviewSessionId||(reviewSessionId=session.getSessionId()),reviewSessionId||null!=this._currentIndexingSession||session.getSessionStatus()===SessionStatus.ACTIONREQUIRED||(this._currentIndexingSession=session.getSessionId()),this.updateIndexingSessionData(session)}this._currentIndexingSession&&this.performIndexingStep()}get currentIndexingSession(){return this._currentIndexingSession}updateIndexingSessionData(indexingSession){this.indexingSessions[indexingSession.getSessionId()]=indexingSession,this.renderIndexingSessionRow(indexingSession)}renderIndexingSessionRow(session){let $row;if(void 0===session)return;if(!this.indexingSessions[session.getSessionId()]||this._prunedSessionIds.includes(session.getSessionId()))return this.$indexingSessionTable.find('tr[data-session-id="'+session.getSessionId()+'"]').remove(),void(0==this.$indexingSessionTable.find("tbody tr").length&&this.$indexingSessionTable.addClass("hidden"));$row=session.getIndexingSessionRowHtml();const $existing=this.$indexingSessionTable.find('tr[data-session-id="'+session.getSessionId()+'"]');$existing.length>0?$existing.replaceWith($row):this.$indexingSessionTable.find("tbody").append($row),this.$indexingSessionTable.removeClass("hidden")}discardIndexingSession(sessionId){const session=this.indexingSessions[sessionId];delete this.indexingSessions[sessionId],this._currentIndexingSession===sessionId&&(this._currentIndexingSession=null),this.renderIndexingSessionRow(session),this.runTasks()}processResponse(response,textStatus){if(this._currentConnectionCount--,"success"===textStatus&&response.error)return alert(response.error),response.stop&&this.discardIndexingSession(response.stop),void this.runTasks();if("success"===textStatus&&response.session){const session=this.createSessionFromModel(response.session);this.indexingSessions[session.getSessionId()]=session,this.renderIndexingSessionRow(session),this._updateCurrentIndexingSession(),session.getSessionStatus()!==SessionStatus.ACTIONREQUIRED||response.skipDialog?this._prunedSessionIds.includes(this._currentIndexingSession)?this.runTasks():this.performIndexingStep():this._prunedSessionIds.includes(this._currentIndexingSession)?this.runTasks():this.reviewSession(session)}this._updateCurrentIndexingSession(),"success"===textStatus&&response.stop&&this.discardIndexingSession(response.stop)}getReviewData(session){const task={sessionId:session.getSessionId(),action:IndexingActions.OVERVIEW,params:{sessionId:session.getSessionId()},callback:()=>{this.renderIndexingSessionRow(session)}};this.enqueueTask(task)}reviewSession(session){if(this._currentlyReviewing)return;this._currentlyReviewing=!0,this.pruneWaitingTasks(session.getSessionId());let $confirmBody=$("<div></div>");const missingEntries=session.getMissingEntries(),missingFiles=missingEntries.files?Object.entries(missingEntries.files):[],missingFolders=missingEntries.folders?Object.entries(missingEntries.folders):[],skippedFiles=session.getSkippedEntries();if(skippedFiles.length){let skippedFilesList="";for(const skippedFile of skippedFiles)skippedFilesList+=`<li>${skippedFile}</li>`;$confirmBody.append(`\n                <h2>${Craft.t("app","Skipped files")}</h2>\n                <p>${Craft.t("app","The following items were not indexed.")}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `)}const haveMissingItems=missingFiles.length||missingFolders.length;if(haveMissingItems){let itemText="";missingFiles.length&&(itemText+="files"),missingFiles.length&&missingFolders.length&&(itemText+=" and "),missingFolders.length&&(itemText+="folders");const translationParams={items:itemText};let missingEntries="";for(const[id,uri]of missingFolders)missingEntries+=`<li><label><input type="checkbox" checked="checked" name="deleteFolder[]" value="${id}"> ${uri}</label></li>`;for(const[id,uri]of missingFiles)missingEntries+=`<li><label><input type="checkbox" checked="checked" name="deleteAsset[]" value="${id}"> ${uri}</label></li>`;$confirmBody.append($(`\n                <h2>${Craft.t("app","Missing {items}",translationParams)}</h2>\n                <p>${Craft.t("app","The following {items} could not be found. Should they be deleted from the index?",translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `))}const $modal=$('<form class="modal fitted confirmmodal"/>').appendTo(Garnish.$bod),$body=$('<div class="body"/>').appendTo($modal).html($confirmBody.html()),$footer=$('<footer class="footer"/>').appendTo($modal),$buttons=$('<div class="buttons right"/>').appendTo($footer),modal=new Garnish.Modal($modal,{hideOnEsc:!1,hideOnShadeClick:!1,onHide:()=>{this._currentlyReviewing=!1}});if(haveMissingItems){let $cancelBtn=$("<button/>",{type:"button",class:"btn",text:Craft.t("app","Keep them")}).on("click",ev=>{ev.preventDefault(),this.stopIndexingSession(session),modal.hide()}).appendTo($buttons);$("<button/>",{type:"submit",class:"btn submit",text:Craft.t("app","Delete them")}).appendTo($buttons)}else $("<button/>",{type:"submit",class:"btn submit",text:Craft.t("app","OK")}).appendTo($buttons);Craft.initUiElements($body),modal.updateSizeAndPosition(),$modal.on("submit",ev=>{ev.preventDefault(),modal.hide();const postData=Garnish.getPostData($body),postParams=Craft.expandPostArray(postData);postParams.sessionId=session.getSessionId();const task={sessionId:session.getSessionId(),action:IndexingActions.FINISH,params:postParams};this.enqueueTask(task,!0)})}startIndexing(params,cb){Craft.postActionRequest(IndexingActions.START,params,(response,textStatus)=>{this.processResponse(response,textStatus),cb()})}performIndexingStep(){if(this._currentIndexingSession||this._updateCurrentIndexingSession(),!this._currentIndexingSession)return;const session=this.indexingSessions[this._currentIndexingSession],concurrentSlots=this._maxConcurrentConnections-this._currentConnectionCount;for(let i=0;i<Math.min(concurrentSlots,session.getEntriesRemaining());i++){const task={sessionId:session.getSessionId(),action:IndexingActions.PROCESS,params:{sessionId:this._currentIndexingSession}};this.enqueueTask(task)}}stopIndexingSession(session){this.pruneWaitingTasks(session.getSessionId());const task={sessionId:session.getSessionId(),action:IndexingActions.STOP,params:{sessionId:session.getSessionId()}};this.enqueueTask(task,!0)}pruneWaitingTasks(sessionId){const newTaskList=[];let modified=!1;this._prunedSessionIds.push(sessionId);for(const task of this._tasksWaiting)task.sessionId!==sessionId?newTaskList.push(task):modified=!0;modified&&(this._tasksWaiting=newTaskList)}enqueueTask(task,prioritize=!1){prioritize?this._priorityTasks.push(task):this._tasksWaiting.push(task),this.runTasks()}runTasks(){if(!(this._tasksWaiting.length+this._priorityTasks.length===0||this._currentConnectionCount>=this._maxConcurrentConnections))for(;this._tasksWaiting.length+this._priorityTasks.length!==0&&this._currentConnectionCount<this._maxConcurrentConnections;){this._currentConnectionCount++;const task=this._priorityTasks.length>0?this._priorityTasks.shift():this._tasksWaiting.shift();Craft.postActionRequest(task.action,task.params,(response,textStatus)=>{this.processResponse(response,textStatus),task.callback&&task.callback()})}}_updateCurrentIndexingSession(){for(const session of Object.values(this.indexingSessions))if(session.getSessionStatus()!==SessionStatus.ACTIONREQUIRED)return void(this._currentIndexingSession=session.getSessionId())}createSessionFromModel(sessionData){return new AssetIndexingSession(sessionData,this)}}class AssetIndexingSession{constructor(model,indexer){this.indexingSessionData=model,this.indexer=indexer}getSessionId(){return this.indexingSessionData.id}getEntriesRemaining(){return this.indexingSessionData.totalEntries-this.indexingSessionData.processedEntries}getSessionStatus(){return this.indexingSessionData.actionRequired?SessionStatus.ACTIONREQUIRED:this.indexer.currentIndexingSession===this.indexingSessionData.id?SessionStatus.ACTIVE:SessionStatus.WAITING}getIndexingSessionRowHtml(){const $tr=$('<tr class="indexingSession" data-session-id="'+this.getSessionId()+'">');$tr.append("<td><ul><li>"+Object.values(this.indexingSessionData.indexedVolumes).join("</li><li>")+"</li></ul></td>"),$tr.append("<td>"+this.indexingSessionData.dateCreated+"</td>");const $progressCell=$('<td class="progress"><div class="progressContainer"></div></td>').css("position","relative"),progressBar=new Craft.ProgressBar($progressCell.find(".progressContainer"),!1);progressBar.setItemCount(this.indexingSessionData.totalEntries),progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries),progressBar.updateProgressBar(),progressBar.showProgressBar(),$progressCell.data("progressBar",progressBar),$progressCell.find(".progressContainer").append(`<div class="progressInfo">${this.indexingSessionData.processedEntries} / ${this.indexingSessionData.totalEntries}</div>`),$tr.append($progressCell),$tr.append("<td>"+this.getSessionStatusMessage()+"</td>");const $actions=this.getActionButtons();return $("<td></td>").append($actions).appendTo($tr),$tr}getActionButtons(){const $buttons=$('<div class="buttons"></div>');if(this.getSessionStatus()==SessionStatus.ACTIONREQUIRED){const reviewMessage=Craft.t("app","Review");$buttons.append($("<button />",{type:"button",class:"btn submit",title:reviewMessage,"aria-label":reviewMessage}).text(reviewMessage).on("click",ev=>{const $container=$(ev.target).parent();$container.hasClass("disabled")||($container.addClass("disabled"),this.indexer.getReviewData(this))}))}const discardMessage=Craft.t("app","Discard");return $buttons.append($("<button />",{type:"button",class:"btn submit",title:discardMessage,"aria-label":discardMessage}).text(discardMessage).on("click",ev=>{$buttons.hasClass("disabled")||($buttons.addClass("disabled"),this.indexer.stopIndexingSession(this))})),$buttons}getSessionStatusMessage(){switch(this.getSessionStatus()){case SessionStatus.ACTIONREQUIRED:return Craft.t("app","Waiting for review");case SessionStatus.ACTIVE:return Craft.t("app","Active");case SessionStatus.WAITING:return Craft.t("app","Waiting")}}getMissingEntries(){return this.indexingSessionData.missingEntries}getSkippedEntries(){return this.indexingSessionData.skippedEntries}}}]);
//# sourceMappingURL=AssetIndexer.min.js.map