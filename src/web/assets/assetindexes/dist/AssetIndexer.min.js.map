{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./AssetIndexer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","SessionStatus","IndexingActions","AssetIndexer","$indexingSessionTable","sessions","maxConcurrentConnections","this","_currentIndexingSession","_currentConnectionCount","_tasksWaiting","_priorityTasks","_prunedSessionIds","_currentlyReviewing","indexingSessions","_maxConcurrentConnections","reviewSessionId","sessionModel","session","createSessionFromModel","getSessionStatus","ACTIONREQUIRED","getSessionId","updateIndexingSessionData","performIndexingStep","indexingSession","renderIndexingSessionRow","$row","undefined","includes","find","remove","length","addClass","getIndexingSessionRowHtml","$existing","replaceWith","append","removeClass","sessionId","runTasks","response","textStatus","error","alert","stop","discardIndexingSession","_updateCurrentIndexingSession","skipDialog","reviewSession","task","action","OVERVIEW","params","callback","enqueueTask","pruneWaitingTasks","$confirmBody","$","missingEntries","getMissingEntries","missingFiles","files","entries","missingFolders","folders","skippedFiles","getSkippedEntries","skippedFilesList","skippedFile","Craft","haveMissingItems","itemText","translationParams","items","id","uri","$modal","appendTo","Garnish","$bod","$body","html","$footer","$buttons","modal","Modal","hideOnEsc","hideOnShadeClick","onHide","$cancelBtn","type","class","text","on","ev","preventDefault","stopIndexingSession","hide","initUiElements","updateSizeAndPosition","postData","getPostData","postParams","expandPostArray","FINISH","cb","postActionRequest","START","processResponse","concurrentSlots","Math","min","getEntriesRemaining","PROCESS","STOP","newTaskList","modified","push","prioritize","shift","values","sessionData","AssetIndexingSession","model","indexer","indexingSessionData","totalEntries","processedEntries","actionRequired","currentIndexingSession","ACTIVE","WAITING","$tr","indexedVolumes","join","dateCreated","$progressCell","css","progressBar","ProgressBar","setItemCount","setProcessedItemCount","updateProgressBar","showProgressBar","data","getSessionStatusMessage","$actions","getActionButtons","reviewMessage","title","$container","target","parent","hasClass","getReviewData","discardMessage","skippedEntries"],"mappings":"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","file":"AssetIndexer.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nvar SessionStatus;\n(function (SessionStatus) {\n    SessionStatus[SessionStatus[\"ACTIONREQUIRED\"] = 0] = \"ACTIONREQUIRED\";\n    SessionStatus[SessionStatus[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    SessionStatus[SessionStatus[\"WAITING\"] = 2] = \"WAITING\";\n})(SessionStatus || (SessionStatus = {}));\nvar IndexingActions;\n(function (IndexingActions) {\n    IndexingActions[\"START\"] = \"asset-indexes/start-indexing\";\n    IndexingActions[\"STOP\"] = \"asset-indexes/stop-indexing-session\";\n    IndexingActions[\"PROCESS\"] = \"asset-indexes/process-indexing-session\";\n    IndexingActions[\"OVERVIEW\"] = \"asset-indexes/indexing-session-overview\";\n    IndexingActions[\"FINISH\"] = \"asset-indexes/finish-indexing-session\";\n})(IndexingActions || (IndexingActions = {}));\n;\n/**\n * Actual classes start here\n */\n// Asset Indexer\n// =====================================================================================\nclass AssetIndexer {\n    /**\n     * @param $element The indexing session table\n     * @param sessions Existing indexing sessions\n     */\n    constructor($indexingSessionTable, sessions, maxConcurrentConnections = 3) {\n        this._currentIndexingSession = null;\n        this._currentConnectionCount = 0;\n        this._tasksWaiting = [];\n        this._priorityTasks = [];\n        this._prunedSessionIds = [];\n        this._currentlyReviewing = false;\n        this.indexingSessions = {};\n        this._maxConcurrentConnections = maxConcurrentConnections;\n        this.$indexingSessionTable = $indexingSessionTable;\n        this.indexingSessions = {};\n        let reviewSessionId = 0;\n        for (const sessionModel of sessions) {\n            let session = this.createSessionFromModel(sessionModel);\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !reviewSessionId) {\n                reviewSessionId = session.getSessionId();\n            }\n            if (!reviewSessionId\n                && this._currentIndexingSession == null\n                && session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n            }\n            this.updateIndexingSessionData(session);\n        }\n        if (this._currentIndexingSession) {\n            this.performIndexingStep();\n        }\n    }\n    get currentIndexingSession() {\n        return this._currentIndexingSession;\n    }\n    /**\n     * Update indexing session store\n     * @param session\n     */\n    updateIndexingSessionData(indexingSession) {\n        this.indexingSessions[indexingSession.getSessionId()] = indexingSession;\n        this.renderIndexingSessionRow(indexingSession);\n    }\n    /**\n     * Return a rendered indexing session row based on its id\n     * @param sessionId\n     */\n    renderIndexingSessionRow(session) {\n        let $row;\n        if (session === undefined) {\n            return;\n        }\n        if (!this.indexingSessions[session.getSessionId()] || this._prunedSessionIds.includes(session.getSessionId())) {\n            this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]').remove();\n            if (this.$indexingSessionTable.find('tbody tr').length == 0) {\n                this.$indexingSessionTable.addClass('hidden');\n            }\n            return;\n        }\n        $row = session.getIndexingSessionRowHtml();\n        const $existing = this.$indexingSessionTable.find('tr[data-session-id=\"' + session.getSessionId() + '\"]');\n        if ($existing.length > 0) {\n            $existing.replaceWith($row);\n        }\n        else {\n            this.$indexingSessionTable.find('tbody').append($row);\n        }\n        this.$indexingSessionTable.removeClass('hidden');\n    }\n    /**\n     * Remove an indexing session\n     * @param sessionId\n     * @protected\n     */\n    discardIndexingSession(sessionId) {\n        const session = this.indexingSessions[sessionId];\n        delete this.indexingSessions[sessionId];\n        if (this._currentIndexingSession === sessionId) {\n            this._currentIndexingSession = null;\n        }\n        this.renderIndexingSessionRow(session);\n        this.runTasks();\n    }\n    /**\n     * Process an indexing response.\n     *\n     * @param response\n     * @param textStatus\n     */\n    processResponse(response, textStatus) {\n        this._currentConnectionCount--;\n        if (textStatus === 'success' && response.error) {\n            alert(response.error);\n            if (response.stop) {\n                this.discardIndexingSession(response.stop);\n            }\n            // A mere error shall not stop the party.\n            this.runTasks();\n            return;\n        }\n        if (textStatus === 'success' && response.session) {\n            const session = this.createSessionFromModel(response.session);\n            this.indexingSessions[session.getSessionId()] = session;\n            this.renderIndexingSessionRow(session);\n            this._updateCurrentIndexingSession();\n            if (session.getSessionStatus() === SessionStatus.ACTIONREQUIRED && !response.skipDialog) {\n                if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                    this.reviewSession(session);\n                }\n                else {\n                    this.runTasks();\n                }\n            }\n            else if (!this._prunedSessionIds.includes(this._currentIndexingSession)) {\n                this.performIndexingStep();\n            }\n            else {\n                this.runTasks();\n            }\n        }\n        this._updateCurrentIndexingSession();\n        if (textStatus === 'success' && response.stop) {\n            this.discardIndexingSession(response.stop);\n        }\n    }\n    getReviewData(session) {\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.OVERVIEW,\n            params: { sessionId: session.getSessionId() },\n            callback: () => {\n                this.renderIndexingSessionRow(session);\n            }\n        };\n        this.enqueueTask(task);\n    }\n    reviewSession(session) {\n        if (this._currentlyReviewing) {\n            return;\n        }\n        this._currentlyReviewing = true;\n        this.pruneWaitingTasks(session.getSessionId());\n        let $confirmBody = $('<div></div>');\n        const missingEntries = session.getMissingEntries();\n        const missingFiles = missingEntries.files ? Object.entries(missingEntries.files) : [];\n        const missingFolders = missingEntries.folders ? Object.entries(missingEntries.folders) : [];\n        const skippedFiles = session.getSkippedEntries();\n        if (skippedFiles.length) {\n            let skippedFilesList = '';\n            for (const skippedFile of skippedFiles) {\n                skippedFilesList += `<li>${skippedFile}</li>`;\n            }\n            $confirmBody.append(`\n                <h2>${Craft.t('app', 'Skipped files')}</h2>\n                <p>${Craft.t('app', 'The following items were not indexed.')}</p>\n                <ul>\n                    ${skippedFilesList}\n                </ul>\n            `);\n        }\n        const haveMissingItems = missingFiles.length || missingFolders.length;\n        if (haveMissingItems) {\n            let itemText = '';\n            if (missingFiles.length) {\n                itemText += 'files';\n            }\n            if (missingFiles.length && missingFolders.length) {\n                itemText += ' and ';\n            }\n            if (missingFolders.length) {\n                itemText += 'folders';\n            }\n            const translationParams = { items: itemText };\n            let missingEntries = '';\n            for (const [id, uri] of missingFolders) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteFolder[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            for (const [id, uri] of missingFiles) {\n                missingEntries += `<li><label><input type=\"checkbox\" checked=\"checked\" name=\"deleteAsset[]\" value=\"${id}\"> ${uri}</label></li>`;\n            }\n            $confirmBody.append($(`\n                <h2>${Craft.t('app', 'Missing {items}', translationParams)}</h2>\n                <p>${Craft.t('app', 'The following {items} could not be found. Should they be deleted from the index?', translationParams)}</p>\n                <ul>\n                    ${missingEntries}\n                </ul>\n            `));\n        }\n        const $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod);\n        const $body = $('<div class=\"body\"/>').appendTo($modal).html($confirmBody.html());\n        const $footer = $('<footer class=\"footer\"/>').appendTo($modal);\n        const $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        const modal = new Garnish.Modal($modal, {\n            hideOnEsc: false,\n            hideOnShadeClick: false,\n            onHide: () => {\n                this._currentlyReviewing = false;\n            }\n        });\n        if (haveMissingItems) {\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Keep them'),\n            }).on('click', ev => {\n                ev.preventDefault();\n                this.stopIndexingSession(session);\n                modal.hide();\n            }).appendTo($buttons);\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Delete them'),\n            }).appendTo($buttons);\n        }\n        else {\n            $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'OK'),\n            }).appendTo($buttons);\n        }\n        Craft.initUiElements($body);\n        modal.updateSizeAndPosition();\n        $modal.on('submit', (ev) => {\n            ev.preventDefault();\n            modal.hide();\n            const postData = Garnish.getPostData($body);\n            const postParams = Craft.expandPostArray(postData);\n            postParams.sessionId = session.getSessionId();\n            // Make this the next task for sure?\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.FINISH,\n                params: postParams\n            };\n            this.enqueueTask(task, true);\n        });\n    }\n    startIndexing(params, cb) {\n        Craft.postActionRequest(IndexingActions.START, params, (response, textStatus) => {\n            this.processResponse(response, textStatus);\n            cb();\n        });\n    }\n    performIndexingStep() {\n        if (!this._currentIndexingSession) {\n            this._updateCurrentIndexingSession();\n        }\n        if (!this._currentIndexingSession) {\n            return;\n        }\n        const session = this.indexingSessions[this._currentIndexingSession];\n        const concurrentSlots = this._maxConcurrentConnections - this._currentConnectionCount;\n        // Queue up at least enough tasks to use up all the free connections of finish the session.\n        for (let i = 0; i < Math.min(concurrentSlots, session.getEntriesRemaining()); i++) {\n            const task = {\n                sessionId: session.getSessionId(),\n                action: IndexingActions.PROCESS,\n                params: { sessionId: this._currentIndexingSession }\n            };\n            this.enqueueTask(task);\n        }\n    }\n    /**\n     * Stop and discard an indexing session.\n     *\n     * @param session\n     */\n    stopIndexingSession(session) {\n        this.pruneWaitingTasks(session.getSessionId());\n        const task = {\n            sessionId: session.getSessionId(),\n            action: IndexingActions.STOP,\n            params: { sessionId: session.getSessionId() }\n        };\n        this.enqueueTask(task, true);\n    }\n    /**\n     * Pune the waiting task list by removing all tasks for a session id.\n     *\n     * @param sessionId\n     */\n    pruneWaitingTasks(sessionId) {\n        const newTaskList = [];\n        let modified = false;\n        this._prunedSessionIds.push(sessionId);\n        for (const task of this._tasksWaiting) {\n            if (task.sessionId !== sessionId) {\n                newTaskList.push(task);\n            }\n            else {\n                modified = true;\n            }\n        }\n        if (modified) {\n            this._tasksWaiting = newTaskList;\n        }\n    }\n    enqueueTask(task, prioritize = false) {\n        if (prioritize) {\n            this._priorityTasks.push(task);\n        }\n        else {\n            this._tasksWaiting.push(task);\n        }\n        this.runTasks();\n    }\n    runTasks() {\n        if (this._tasksWaiting.length + this._priorityTasks.length === 0 || this._currentConnectionCount >= this._maxConcurrentConnections) {\n            return;\n        }\n        while (this._tasksWaiting.length + this._priorityTasks.length !== 0 && this._currentConnectionCount < this._maxConcurrentConnections) {\n            this._currentConnectionCount++;\n            const task = this._priorityTasks.length > 0 ? this._priorityTasks.shift() : this._tasksWaiting.shift();\n            Craft.postActionRequest(task.action, task.params, (response, textStatus) => {\n                this.processResponse(response, textStatus);\n                if (task.callback) {\n                    task.callback();\n                }\n            });\n        }\n    }\n    _updateCurrentIndexingSession() {\n        for (const session of Object.values(this.indexingSessions)) {\n            if (session.getSessionStatus() !== SessionStatus.ACTIONREQUIRED) {\n                this._currentIndexingSession = session.getSessionId();\n                return;\n            }\n        }\n    }\n    /**\n     * Create a session from the data model.\n     *\n     * @param sessionData\n     * @private\n     */\n    createSessionFromModel(sessionData) {\n        return new AssetIndexingSession(sessionData, this);\n    }\n}\nclass AssetIndexingSession {\n    constructor(model, indexer) {\n        this.indexingSessionData = model;\n        this.indexer = indexer;\n    }\n    /**\n     * Get the session id\n     */\n    getSessionId() {\n        return this.indexingSessionData.id;\n    }\n    /**\n     * Get the remaining entry count for this sessions.\n     */\n    getEntriesRemaining() {\n        return this.indexingSessionData.totalEntries - this.indexingSessionData.processedEntries;\n    }\n    /**\n     * Get the session status.\n     */\n    getSessionStatus() {\n        if (this.indexingSessionData.actionRequired) {\n            return SessionStatus.ACTIONREQUIRED;\n        }\n        if (this.indexer.currentIndexingSession === this.indexingSessionData.id) {\n            return SessionStatus.ACTIVE;\n        }\n        return SessionStatus.WAITING;\n    }\n    /**\n     * Create row html as a JQuery object based on an indexing sessions\n     * @param session\n     * @private\n     */\n    getIndexingSessionRowHtml() {\n        const $tr = $('<tr class=\"indexingSession\" data-session-id=\"' + this.getSessionId() + '\">');\n        $tr.append('<td><ul><li>' + Object.values(this.indexingSessionData.indexedVolumes).join('</li><li>') + '</li></ul></td>');\n        $tr.append('<td>' + this.indexingSessionData.dateCreated + '</td>');\n        const $progressCell = $('<td class=\"progress\"><div class=\"progressContainer\"></div></td>').css('position', 'relative');\n        const progressBar = new Craft.ProgressBar($progressCell.find('.progressContainer'), false);\n        progressBar.setItemCount(this.indexingSessionData.totalEntries);\n        progressBar.setProcessedItemCount(this.indexingSessionData.processedEntries);\n        progressBar.updateProgressBar();\n        progressBar.showProgressBar();\n        $progressCell.data('progressBar', progressBar);\n        $progressCell.find('.progressContainer').append(`<div class=\"progressInfo\">${this.indexingSessionData.processedEntries} / ${this.indexingSessionData.totalEntries}</div>`);\n        $tr.append($progressCell);\n        $tr.append('<td>' + this.getSessionStatusMessage() + '</td>');\n        const $actions = this.getActionButtons();\n        $('<td></td>').append($actions).appendTo($tr);\n        return $tr;\n    }\n    /**\n     * Get action buttons for an indexing session\n     * @param session\n     * @private\n     */\n    getActionButtons() {\n        const $buttons = $('<div class=\"buttons\"></div>');\n        if (this.getSessionStatus() == SessionStatus.ACTIONREQUIRED) {\n            const reviewMessage = Craft.t('app', 'Review');\n            $buttons.append($('<button />', {\n                type: 'button',\n                'class': 'btn submit',\n                title: reviewMessage,\n                \"aria-label\": reviewMessage,\n            }).text(reviewMessage).on('click', ev => {\n                const $container = $(ev.target).parent();\n                if ($container.hasClass('disabled')) {\n                    return;\n                }\n                $container.addClass('disabled');\n                this.indexer.getReviewData(this);\n            }));\n        }\n        const discardMessage = Craft.t('app', 'Discard');\n        $buttons.append($('<button />', {\n            type: 'button',\n            'class': 'btn submit',\n            title: discardMessage,\n            \"aria-label\": discardMessage,\n        }).text(discardMessage).on('click', ev => {\n            if ($buttons.hasClass('disabled')) {\n                return;\n            }\n            $buttons.addClass('disabled');\n            this.indexer.stopIndexingSession(this);\n        }));\n        return $buttons;\n    }\n    /**\n     * Get the session status verbose message\n     *\n     * @param status\n     */\n    getSessionStatusMessage() {\n        switch (this.getSessionStatus()) {\n            case SessionStatus.ACTIONREQUIRED:\n                return Craft.t('app', 'Waiting for review');\n                break;\n            case SessionStatus.ACTIVE:\n                return Craft.t('app', 'Active');\n                break;\n            case SessionStatus.WAITING:\n                return Craft.t('app', 'Waiting');\n                break;\n        }\n    }\n    /**\n     * Return a list of missing entries for this session\n     */\n    getMissingEntries() {\n        return this.indexingSessionData.missingEntries;\n    }\n    /**\n     * Return a list of skipped entries for this session\n     */\n    getSkippedEntries() {\n        return this.indexingSessionData.skippedEntries;\n    }\n}\n"],"sourceRoot":""}