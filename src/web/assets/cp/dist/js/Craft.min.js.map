{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdDraftInPreview","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","autosaveDrafts","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","publishDraftAction","hashedCpEditUrl","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","createDraftNoticeHud","$closeBtn","deleteDraftAction","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","$saveBtnContainer","data-align","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId) {\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId) {\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId) {\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId) {\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}